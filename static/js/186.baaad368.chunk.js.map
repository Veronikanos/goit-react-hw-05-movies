{"version":3,"file":"static/js/186.baaad368.chunk.js","mappings":"8LAsCA,UAlCA,WACE,OAA8BA,EAAAA,EAAAA,UAAS,IAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QASR,OARAE,EAAAA,EAAAA,YAAU,WACHF,IAELG,EAAAA,EAAAA,IAAeH,GAASI,MAAK,SAAAN,GAC3BC,EAAWD,EACZ,GACF,GAAE,CAACE,KAGF,4BACE,kBACCF,EAAQO,OAAS,GAChB,+BACE,wBACGP,EAAQQ,KAAI,SAAAC,GACX,OACE,2BACE,wBAAKA,EAAKC,UACV,uBAAID,EAAKE,YAFFF,EAAKG,GAKjB,SAIL,uDAIP,C,wMCjCKC,EAAWC,EAAAA,EAAAA,OAAa,CAC5BC,QAAS,+BACTC,OAAQ,CACNC,QAAS,sCAIAC,EAAmB,mCAAG,+GAERL,EAASM,IAAI,sBAAuB,CAAC,GAF7B,uBAEvBC,EAFuB,EAEvBA,KAFuB,kBAGxBA,EAAKC,SAHmB,uCAK/BC,EAAAA,GAAAA,QAAc,QALiB,kBAMxB,KAAMC,SANkB,yDAAH,qDAUnBC,EAAiB,mCAAG,WAAMC,GAAN,kGAENZ,EAASM,IAAT,iBAAuBM,GAAY,CACxDT,OAAQ,CAAEU,SAAU,WAHO,uBAErBN,EAFqB,EAErBA,KAFqB,kBAMtBA,GANsB,yDAQtB,KAAMG,SARgB,yDAAH,sDAYjBI,EAAW,mCAAG,WAAMF,GAAN,kGAEAZ,EAASM,IAAT,iBAAuBM,EAAvB,YAA2C,CAChET,OAAQ,CAAEU,SAAU,WAHC,uBAEfN,EAFe,EAEfA,KAFe,kBAKhBA,EAAKQ,MALW,yDAOhB,KAAML,SAPU,yDAAH,sDAWXlB,EAAc,mCAAG,WAAMoB,GAAN,kGAEHZ,EAASM,IAAT,iBAAuBM,EAAvB,YAA2C,CAChET,OAAQ,CAAEU,SAAU,WAHI,uBAElBN,EAFkB,EAElBA,KAFkB,kBAKnBA,EAAKC,SALc,yDAOnB,KAAME,SAPa,yDAAH,sDAWdM,EAAkB,mCAAG,WAAMC,GAAN,kGAEPjB,EAASM,IAAT,gBAA8B,CACnDH,OAAQ,CAAEU,SAAU,QAASK,KAAM,EAAGC,eAAe,EAAOF,MAAAA,KAHhC,uBAEtBV,EAFsB,EAEtBA,KAGRa,QAAQC,IAAId,EAAKC,SALa,kBAMvBD,GANuB,yDAQvB,KAAMG,SARiB,yDAAH,qD","sources":["components/Reviews/Reviews.jsx","components/service/api.js"],"sourcesContent":["import { getReviewsById } from 'components/service/api';\nimport { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\n\nfunction Reviews() {\n  const [reviews, setReviews] = useState([]);\n  const { movieId } = useParams();\n  useEffect(() => {\n    if (!movieId) return;\n\n    getReviewsById(movieId).then(reviews => {\n      setReviews(reviews);\n    });\n  }, [movieId]);\n\n  return (\n    <div>\n      <hr />\n      {reviews.length > 0 ? (\n        <>\n          <ul>\n            {reviews.map(item => {\n              return (\n                <li key={item.id}>\n                  <h3>{item.author}</h3>\n                  <p>{item.content}</p>\n                </li>\n              );\n            })}\n          </ul>\n        </>\n      ) : (\n        <h3>There are no reviews yet</h3>\n      )}\n    </div>\n  );\n}\n\nexport default Reviews;\n","import axios from 'axios';\nimport { toast } from 'react-toastify';\n\nconst instance = axios.create({\n  baseURL: 'https://api.themoviedb.org/3',\n  params: {\n    api_key: '2d95e97f255e7635245c1980eab541d3',\n  },\n});\n\nexport const fetchTrendingMovies = async () => {\n  try {\n    const { data } = await instance.get('/trending/movie/day', {});\n    return data.results;\n  } catch (error) {\n    toast.warning('OOPS');\n    return error.message;\n  }\n};\n\nexport const fetchMovieDetails = async movie_id => {\n  try {\n    const { data } = await instance.get(`/movie/${movie_id}`, {\n      params: { language: 'en-US' },\n    });\n    // console.log(data);\n    return data;\n  } catch (error) {\n    return error.message;\n  }\n};\n\nexport const getCastById = async movie_id => {\n  try {\n    const { data } = await instance.get(`/movie/${movie_id}/credits`, {\n      params: { language: 'en-US' },\n    });\n    return data.cast;\n  } catch (error) {\n    return error.message;\n  }\n};\n\nexport const getReviewsById = async movie_id => {\n  try {\n    const { data } = await instance.get(`/movie/${movie_id}/reviews`, {\n      params: { language: 'en-US' },\n    });\n    return data.results;\n  } catch (error) {\n    return error.message;\n  }\n};\n\nexport const searchMovieByTitle = async query => {\n  try {\n    const { data } = await instance.get(`/search/movie`, {\n      params: { language: 'en-US', page: 1, include_adult: false, query },\n    });\n    console.log(data.results);\n    return data;\n  } catch (error) {\n    return error.message;\n  }\n};\n"],"names":["useState","reviews","setReviews","movieId","useParams","useEffect","getReviewsById","then","length","map","item","author","content","id","instance","axios","baseURL","params","api_key","fetchTrendingMovies","get","data","results","toast","message","fetchMovieDetails","movie_id","language","getCastById","cast","searchMovieByTitle","query","page","include_adult","console","log"],"sourceRoot":""}